[
  {
    "title": "Jun's UI Design Lab has been published!",
    "content": "<p><span style=\"background-color: rgb(32, 32, 32);\">Jun's UI Design Lab is your gateway to cutting-edge solutions that blend trendy colors, captivating buttons, and CSS animations to elevate your UX/UI design journey. </span></p><p><span style=\"background-color: rgb(32, 32, 32);\">My curated selection of trendy colors breathes life into your designs, evoking emotion and creating memorable experiences. </span></p><p><span style=\"background-color: rgb(32, 32, 32);\">Combined with sleek and interactive buttons, we empower users to navigate effortlessly through your interfaces, fostering engagement and satisfaction. With CSS animations, we add an extra layer of dynamism to your designs, captivating users and guiding them through their digital journey with fluidity and grace.</span></p><p><span style=\"background-color: rgb(32, 32, 32);\">﻿Here is a link:&nbsp;</span><a href=\"https://main.d1dglxhs285w9v.amplifyapp.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgb(32, 32, 32); color: rgb(0, 116, 217);\">https://main.d1dglxhs285w9v.amplifyapp.com/</a></p>",
    "tag": "Project",
    "date": "02/26/2024",
    "id": 0
  },
  {
    "title": "Building My New Portfolio Website with a Twist",
    "content": "<p><span style=\"background-color: rgb(32, 32, 32);\">Hey there! I'm currently in the midst of developing a fresh portfolio website. I've decided to spice things up by incorporating a bunch of animations using Framer-motion. It's been a fun ride figuring out how to animate different elements and make the website feel alive.</span></p><p><span style=\"background-color: rgb(32, 32, 32);\">The theme of my portfolio is something I'm super excited about. I'm going all in with a Universe and Black Color scheme as the main theme colors. Imagine navigating through space while checking out my projects - pretty cool, right?</span></p><p><span style=\"background-color: rgb(32, 32, 32);\"><span class=\"ql-cursor\">﻿</span>As of now, I've got just the contact page left to finish up. The rest of the site is practically ready to go live. Can't wait to share it with everyone!</span></p>",
    "tag": "Project",
    "date": "03/28/2024",
    "id": 1
  },
  {
    "title": " Managing forms in React using state management versus using FormData",
    "content": "<p><span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\"> In React, using state management for handling forms could be advantageous in terms of two-way data binding, asynchronous validation, and component reusability.</span></p><p><span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">On the other hand, using FormData offers a straightforward and fast development process, with potential performance benefits for large forms.</span></p><h1><strong style=\"background-color: rgb(33, 33, 33); color: rgb(255, 153, 0);\">Data Binding</strong></h1><p><strong>Using State Management:</strong> <span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">Easy to implement two-way data binding. User input updates the state, and state changes are reflected on the UI.</span></p><p><strong>Using FormData:</strong> <span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">Generally one-way. User input is not internally managed, and data is collected only at submission.</span></p><h1><strong style=\"background-color: rgb(33, 33, 33); color: rgb(255, 153, 0);\">Component Reusability</strong></h1><p><strong>Using State Management:</strong> <span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">High. Form elements can be encapsulated into components for reuse.</span></p><p><strong>Using FormData:</strong> <span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">Lower. When using FormData, reusability of form elements may not be as flexible as state management.</span></p><h1><strong style=\"background-color: rgb(33, 33, 33); color: rgb(255, 153, 0);\">Performance</strong></h1><p><strong>Using State Management:</strong> <span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">Large forms might face performance issues. Each input field update triggers a state update, necessitating optimization.</span></p><p><strong>Using FormData:</strong> <span style=\"background-color: rgb(33, 33, 33); color: rgb(236, 236, 236);\">Potentially more efficient. Data is processed at once upon submission, resulting in fewer re-renders.</span></p>",
    "tag": "React",
    "date": "03/28/2024",
    "id": 2
  },
  {
    "title": "Simplifying Next.js API Routes and Handlers",
    "content": "<p>let's dive into how Next.js handles API routes and what you need to know to get started.</p><h1><span style=\"color: rgb(255, 153, 0);\">API Routes</span></h1><p>In Next.js, organizing your API files is pretty straightforward. You'll want to place your API files under the <strong>app/api/[your folder name]/route.js</strong> (or .ts if you're using TypeScript).</p><p>ex)</p><pre class=\"ql-syntax\" spellcheck=\"false\">// route.ts\nexport async function POST(request: Request) {\n  const notebooks = [\n    { name: \"Notebook A\", cpu: \"Intel\", ram: 16, ssd: 512, display: 15.6 },\n    { name: \"Notebook B\", cpu: \"AMD\", ram: 8, ssd: 256, display: 14 },\n  ];\n\n  return new Response(JSON.stringify({ notebooks }), {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n</pre><h1><span style=\"color: rgb(255, 153, 0);\">HTTP Methods</span></h1><p>You can use various HTTP methods like GET, POST, PUT, PATCH, DELETE, HEAD, and OPTIONS. Here's a quick overview:</p><ul><li><span style=\"color: var(--tw-prose-bold);\">GET</span>: Fetch data from the server.</li><li><span style=\"color: var(--tw-prose-bold);\">POST</span>: Submit data to the server.</li><li><span style=\"color: var(--tw-prose-bold);\">PUT/PATCH</span>: Update existing data.</li><li><span style=\"color: var(--tw-prose-bold);\">DELETE</span>: Remove data.</li><li><span style=\"color: var(--tw-prose-bold);\">HEAD/OPTIONS</span>: Used for checking the capabilities of the server or resource.</li></ul><h1><span style=\"color: rgb(255, 153, 0);\">Data Fetching on the Server Side</span></h1><pre class=\"ql-syntax\" spellcheck=\"false\">async function getNotebookData() {\n  const res = await fetch(\"http://localhost:3000/api/search\", {\n    method: \"POST\",\n    cache: \"no-store\",\n  });\n  return res.json();\n}\n\nexport default async function Home() {\n  const notebookData = await getNotebookData();\n  return (\n  ~\n  );\n}\n</pre>",
    "tag": "Next.js",
    "date": "03/31/2024",
    "id": 4
  }
]